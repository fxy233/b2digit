@model IEnumerable<Projet_pilate.Models.ApplicationUser>

@{
    ViewBag.Title = "Users";
    Layout = null;
}

@if (User.IsInRole("Administrateur") || User.IsInRole("Super-Administrateur"))
{
    <p>
        @Html.ActionLink("Ajouter un profil", "Register", "Account", new { @class = "btn btn-primary btn-large", style = "margin-bottom: 20px;"})
    </p>
}


<table class="display" id="mytable2" style="width:90%">
    <thead>
        <tr>
            <th>
                Prénom
            </th>
            <th>
                Nom
            </th>
            <th>
                Rôle
            </th>
            <th>
                Email
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>


                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Position)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>



                @if (User.IsInRole("Super-Administrateur"))
                {
                    <td>
                        @Html.ActionLink("Supprimer", "Delete", new { id = item.Id }, new { @class = "btn btn-primary btn-large" })
                        @*Html.ActionLink("Modifier", "Edit", new { id = item.Id }, new { @class = "btn btn-primary btn-large" })*@
                        @*Html.RouteLink("Changer le mot de passe", "ChangePassword", "Manage", new { @class = "btn btn-primary btn-large" })*@
                    </td>

                }

                else if (User.IsInRole("Administrateur") && item.Position != "Administrateur" && item.Position != "Super-Administrateur")
                {
                    <td>
                        @Html.ActionLink("Supprimer", "Edit", new { id = item.Id }, new { @class = "btn btn-primary btn-large" })
                        @*Html.RouteLink("Changer le mot de passe", "ChangePassword", "Manage", new { @class = "btn btn-primary btn-large" })*@
                    </td>
                }

                else
                {
                    <td>
                        <button class="btn btn-secondary btn-large" type="button" disabled>Supprimer</button>
                        <button class="btn btn-secondary btn-large" type="button" disabled>Changer mot de passe</button>
                    </td>

                }

            </tr>

        }
    </tbody>

    <tfoot >
        <tr>
            <th style="border-color:white">
                Prénom
            </th>
            <th style="border-color:white">
                Nom
            </th>
            <th style="border-color:white">
                Rôle
            </th>
            <th style="border-color:white">
                Email
            </th>

            
        </tr>
    </tfoot>
</table>


<script>
function ConfirmationDialog() {
if(confirm("Etes vous certain de votre choix ?"))
return true;
else
return false;
    }

    function sortTable1() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("mytable1");
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                //check if the two rows should switch place:
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }

    function sortTable2() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("mytable2");
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                //check if the two rows should switch place:
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }

    function sortTable3() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("mytable3");
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                //check if the two rows should switch place:
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }

</script>
