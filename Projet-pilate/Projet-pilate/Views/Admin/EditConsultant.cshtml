@model Projet_pilate.Models.UpdateConsultantViewModel

@{
    ViewBag.Title = "EditConsultant";
}

<h2>Modification d'un Consultant</h2>
<h5>Attention :Ne pas mettre d'espace dans le prénom et dans le nom.</h5>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EntryDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <label class="col-md-2 control-label" for="Subsidiary">Filiale</label>
            <div class="col-md-10">
                <select class="form-control" id="Subsidiary" name="Subsidiary" required>
                    <option selected>@Model.SubsidiaryName</option>
                    @foreach (var subsidiary in Model.Subsidiaries)
                    {
                        <option value="@subsidiary">@subsidiary</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-2 control-label" for="ProfitCenter">Centre de profit</label>
            <div class="col-md-10">
                <select class="form-control" id="ProfitCenter" name="ProfitCenter" required>
                    <option selected>@Model.ProfitCenterName</option>
                    @foreach (var profitCenter in Model.ProfitCenters)
                    {
                        <option value="@profitCenter">@profitCenter</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-2 control-label" for="Status">Statut</label>
            <div class="col-md-10">
                <select class="form-control" id="Status" name="Status" required>
                    <option selected id="StatusByDefault">@Model.Status</option>
                    <option id="Consultant">Consultant</option>
                    <option id="SousTraitant">Sous-Traitant</option>
                </select>
            </div>
        </div>


        <div class="form-group">
            <label class="col-md-2 control-label" for="Status">Type de coût</label>
            <div class="col-md-10">

                @if (@ViewData["CostType"] == "MonthlyCost" || @ViewData["CostType"] == null)
                {
                    <span class="radio">
                        <label>
                            <input type="radio" name="CostType" id="MonthlyCost" value="MonthlyCost" checked>
                            Salaire mensuel
                        </label>
                    </span>
                    <span class="radio">
                        <label>
                            <input type="radio" name="CostType" id="DailyCost" value="DailyCost">
                            Coût journalier
                        </label>
                    </span>
                }
                else
                {
                    <span class="radio">
                        <label>
                            <input type="radio" name="CostType" id="MonthlyCost" value="MonthlyCost">
                            Salaire mensuel
                        </label>
                    </span>
                    <span class="radio">
                        <label>
                            <input type="radio" name="CostType" id="DailyCost" value="DailyCost" checked>
                            Coût journalier
                        </label>
                    </span>
                }

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MealCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MealCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MealCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TravelPackage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TravelPackage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TravelPackage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExceptionalCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExceptionalCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExceptionalCost, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="valider" class="btn btn-primary btn-large" />
            </div>
        </div>
    </div>



}

<div>
    @Html.ActionLink("Retour à la liste", "ConsultantList", "Consultant", new { @class = "btn btn-primary btn-large" })
</div>




<script>

    var Status = document.getElementById('Status');
    var dailyCost = document.getElementById('DailyCost');
    var monthlyCost = document.getElementById('MonthlyCost');

    var StatusByDefault = document.getElementById('StatusByDefault');
    var Consultant = document.getElementById('Consultant');
    var SousTraitant = document.getElementById('SousTraitant');


    if (Status.childNodes[1].textContent === "Sous-Traitant") {

        dailyCost.checked = true;
    } else {
        monthlyCost.checked = true;
    }



    Status.addEventListener('change', function () {

        if (!dailyCost.checked === true && !Consultant.selected) {

            StatusByDefault.remove();
            dailyCost.checked = true;
            monthlyCost.checked = false;

        } else if (!monthlyCost.checked === true && !monthlyCost.selected) {

            StatusByDefault.remove();
            dailyCost.checked = false;
            monthlyCost.checked = true;
        }

    });

    dailyCost.addEventListener('click', function () {

        SousTraitant.selected = true;
    });


    monthlyCost.addEventListener('click', function () {

        Consultant.selected = true;
    });

</script>